name: 'CI/CD'

on:
  push:
    branches: ["develop", "main"]

env:
  # GAR_LOCATION: "europe-west1-docker.pkg.dev/${{secrets.PROJECT_ID}}/objectchecker"
  GAR_LOCATION: "europe-west1-docker.pkg.dev/${{secrets.PROJECT_ID}}/jobs-launcher"
  TAG: ${{github.sha}}
  IMAGE_NAME: "cloud_run_job"
  TF_FOLDER: "tf_files/"
  FOLDERS: |
    - first_job
    - second_job


jobs:
  list-folders:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: List folders in "src"
      shell: bash
      run: |
        # Créer un tableau vide pour stocker les noms des dossiers
        echo $(pwd)
        ls -d src/
        folders=()

        # Itérer sur chaque élément dans le dossier "A"
        for file in .src/*; do
          # Vérifier si l'élément est un dossier
          echo $(file)
          if [ -d "$file" ]; then
            # Ajouter le nom du dossier au tableau
            folders+=("$file")
          fi
        done

        # Imprimer la liste des dossiers
        echo "Liste des dossiers : ${folders[@]}"

        # Enregistrer la liste des dossiers dans une variable
        echo "::set-output name=folders::${folders[@]}"

    # Exporter la variable pour l'utiliser dans d'autres étapes
    outputs:
      folders: ${{ steps.list-folders.outputs.folders }}
  # deploy:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'
  #   strategy:
  #     matrix:
  #       folder: [first_job, second_job]
  #   steps:

  #   - name: Checkout
  #     uses: actions/checkout@v3

  #   - name: Google Auth
  #     uses: 'google-github-actions/auth@v2'
  #     with:
  #       workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
  #       service_account: '${{ secrets.WIF_SA }}'

  #   - name: "Set up Cloud SDK"
  #     uses: "google-github-actions/setup-gcloud@v1"

  #   - name: "Connect to Artifact Registry"
  #     run: gcloud auth configure-docker europe-west1-docker.pkg.dev --quiet

  #   - name: Build image
  #     run: docker build ./src/${{ matrix.folder }} --file Dockerfile --tag ${{ env.GAR_LOCATION }}/${{ matrix.folder }}:${{ env.TAG }}

  #   - name: Push image
  #     run: docker push ${{ env.GAR_LOCATION }}/${{ matrix.folder }}:${{ env.TAG }}
  
  # terraform:
  #   runs-on: ubuntu-latest
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'
  #   defaults:
  #     run:
  #       working-directory: ${{ env.TF_FOLDER }}
  #   steps:
  #   - name: Checkout
  #     uses: actions/checkout@v3
  #   - name: Google Auth
  #     uses: 'google-github-actions/auth@v2'
  #     with:
  #       create_credentials_file: 'true'
  #       workload_identity_provider: '${{ secrets.WIF_PROVIDER }}'
  #       service_account: '${{ secrets.WIF_SA }}'
  #   # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
  #   - name: Setup Terraform
  #     uses: hashicorp/setup-terraform@v2

  #   # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
  #   - name: Terraform Init
  #     run: terraform init
    
  #   - name: Setup terraform variables
  #     id: vars
  #     run: |-
  #       cat > pipeline.auto.tfvars <<EOF
  #       region="europe-west1" 
  #       project_id="${{ secrets.PROJECT_ID }}"
  #       artifact_registry_image_name="${{ env.GAR_LOCATION }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}"
  #       EOF
  #   # Generates an execution plan for Terraform
  #   - name: Terraform Plan
  #     run: terraform plan -lock=false
    
  #   - name: Terraform Apply
  #     run: terraform apply -auto-approve -input=false -lock=false